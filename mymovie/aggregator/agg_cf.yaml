AWSTemplateFormatVersion: "2010-09-09"
Description: Aggregator
Parameters:
  CodeVersion:
    Type: String
    Default: JVbpbepdr9haSzQLXAWfwa2BymH2psCd
Resources:
#  AggregatorServer:
#    Type: AWS::EC2::Instance
#    Properties:
#      BlockDeviceMappings:
#        - BlockDeviceMapping
#      CpuOptions:
#        CpuOptions
#      CreditSpecification:
#        CreditSpecification
#      DisableApiTermination: Boolean
#      EbsOptimized: Boolean
#      ElasticGpuSpecifications:
#        - ElasticGpuSpecification
#      ElasticInferenceAccelerators:
#        - ElasticInferenceAccelerator
#      HibernationOptions:
#        HibernationOptions
#      HostId: String
#      HostResourceGroupArn: String
#      IamInstanceProfile: String
#      ImageId: String
#      InstanceInitiatedShutdownBehavior: String
#      InstanceType: String
#      Ipv6AddressCount: Integer
#      Ipv6Addresses:
#        - InstanceIpv6Address
#      KernelId: String
#      KeyName: String
#      LaunchTemplate:
#        LaunchTemplateSpecification
#      LicenseSpecifications:
#        - LicenseSpecification
#      Monitoring: Boolean
#      NetworkInterfaces:
#        - NetworkInterface
#      PlacementGroupName: String
#      PrivateIpAddress: String
#      RamdiskId: String
#      SecurityGroupIds:
#        - String
#      SecurityGroups:
#        - String
#      SourceDestCheck: Boolean
#      SsmAssociations:
#        - SsmAssociation
#      SubnetId: String
#      Tags:
#        - Tag
#      Tenancy: String
#      UserData: String
#      Volumes:
#        - Volume


  IAMAggregatorLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AggregatorLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: test-mymovie-GatewayLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - arn:aws:dynamodb:eu-west-1:987471261617:table/test-mymovie-*
                Effect: Allow
  PandasLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.8
      Content:
        S3Bucket: fof-mymovie-lambda
        S3Key: lambda_layers/my-Python38-pandas1-0-3-numpy1-18-2.zip
      LayerName: myPython38pandas103numpy1182
      LicenseInfo: 'MIT'

  AggregatorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: test-mymovie-aggregator
      Description: Agg Function
      Code:
        S3Bucket: fof-mymovie-lambda
        S3Key: mymovie.zip
        S3ObjectVersion:
          Ref: CodeVersion
      Handler: mymovie.aggregator.mymovie_find_bookings.aggregate
      Runtime: python3.8
      MemorySize: 1024
      Role:
        Fn::GetAtt:
          - IAMAggregatorLambdaRole
          - Arn
      Timeout: 60
      Layers:
        - !Ref PandasLayer

